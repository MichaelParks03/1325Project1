import java.util.*;
import java.util.regex.Pattern;

public class DigitalCalendar {

    private static final String TIME_PATTERN = "^(0?[1-9]|1[0-2]):[0-5][0-9] (AM|PM)$";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Map<Integer, List<Event>> calendar = new TreeMap<>();

        System.out.println("\nWelcome to your digital calendar!");
        System.out.println("-------------------------------------");
        System.out.println("Instructions: ");
        System.out.println("1. Input Month\n2. Input Year\n3. Input Events (Date, Time, Description)");
        System.out.println("4. When done, confirm to generate your calendar.");
        System.out.println("-------------------------------------\n");

        System.out.print("Would you like to begin entering information? (Yes/No): ");
        String beginCalendar = sc.next().toLowerCase();
        sc.nextLine(); // Consume newline

        if (!beginCalendar.equals("yes")) {
            System.out.println("Okay! Have a great day!");
            sc.close();
            return;
        }

        // Get month and year
        System.out.print("\nEnter the month name (e.g., March): ");
        String month = sc.nextLine();
        System.out.print("Enter the year: ");
        int year = sc.nextInt();
        sc.nextLine(); // Consume newline

        int monthDays = getDaysInMonth(month, year);
        if (monthDays == 0) {
            System.out.println("Invalid month entered. Please restart.");
            sc.close();
            return;
        }

        // Event Entry
        boolean addingEvents = true;
        while (addingEvents) {
            System.out.print("\nEnter the day of the month (1-" + monthDays + "): ");
            int day = sc.nextInt();
            sc.nextLine(); // Consume newline

            if (day < 1 || day > monthDays) {
                System.out.println("Invalid day! Please enter a valid date.");
                continue;
            }

            // Validate time format
            String time;
            while (true) {
                System.out.print("Enter the event time (12-hour format, e.g., 10:30 AM): ");
                time = sc.nextLine().toUpperCase(); // Convert to uppercase for consistency

                if (isValidTime(time)) {
                    break; // Valid input, exit loop
                } else {
                    System.out.println("Invalid time format! Please enter in 12-hour format (e.g., 12:00 AM - 11:59 PM).");
                }
            }

            System.out.print("Enter the event description: ");
            String description = sc.nextLine();

            // Add the event to the calendar
            Event event = new Event(time, description);
            calendar.computeIfAbsent(day, k -> new ArrayList<>()).add(event);

            // Sort events for the day
            calendar.get(day).sort(Comparator.comparing(Event::getTime));

            System.out.print("Would you like to add another event? (Yes/No): ");
            String response = sc.nextLine().toLowerCase();
            addingEvents = response.equals("yes");
        }

        // Display the final calendar
        displayCalendar(month, year, calendar);
        sc.close();
    }

    /**
     * Returns the number of days in a given month, considering leap years.
     */
    private static int getDaysInMonth(String month, int year) {
        switch (month.toLowerCase()) {
            case "january": return 31;
            case "february": return (isLeapYear(year)) ? 29 : 28;
            case "march": return 31;
            case "april": return 30;
            case "may": return 31;
            case "june": return 30;
            case "july": return 31;
            case "august": return 31;
            case "september": return 30;
            case "october": return 31;
            case "november": return 30;
            case "december": return 31;
            default: return 0; // Invalid month
        }
    }

    /**
     * Determines if a given year is a leap year.
     */
    private static boolean isLeapYear(int year) {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    /**
     * Validates if the input time follows the 12-hour format (e.g., "10:30 AM").
     */
    private static boolean isValidTime(String time) {
        return Pattern.matches(TIME_PATTERN, time);
    }

    /**
     * Displays the calendar with events.
     */
    private static void displayCalendar(String month, int year, Map<Integer, List<Event>> calendar) {
        System.out.println("\n╔══════════════════════════════════════════════════════════╗");
        System.out.printf("║ %-56s ║\n", "Digital Calendar for " + month + " " + year);
        System.out.println("╠══════════════════════════════════════════════════════════╣");

        for (Map.Entry<Integer, List<Event>> entry : calendar.entrySet()) {
            int day = entry.getKey();
            List<Event> events = entry.getValue();

            System.out.printf("║ Day %2d: %-48s ║\n", day, "");
            System.out.println("╟──────────────────────────────────────────────────────────╢");

            for (Event event : events) {
                System.out.printf("║ %-8s │ %-45s ║\n", event.getTime(), event.getDescription());
            }

            System.out.println("╠══════════════════════════════════════════════════════════╣");
        }

        System.out.println("╚══════════════════════════════════════════════════════════╝");
    }
}

/**
 * Represents an event in the calendar.
 */
class Event {
    private String time;
    private String description;

    public Event(String time, String description) {
        this.time = time;
        this.description = description;
    }

    public String getTime() {
        return time;
    }

    public String getDescription() {
        return description;
    }
}
